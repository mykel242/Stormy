name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.1)'
        required: true
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          TAG="v$VERSION"
        else
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG=$TAG" >> $GITHUB_OUTPUT
    
    - name: Run tests
      uses: leafo/gh-actions-lua@v10
      with:
        luaVersion: "5.1"
    
    - uses: leafo/gh-actions-luarocks@v4
    
    - run: |
        luarocks install busted
        busted -v tests/
    
    - name: Update TOC version
      run: |
        sed -i "s/## Version: .*/## Version: ${{ steps.version.outputs.VERSION }}/" STORMY.toc
    
    - name: Create package
      run: |
        mkdir -p .release/Stormy
        rsync -av --exclude='.git*' --exclude='.release' --exclude='tests' --exclude='*.md' --exclude='.luacheckrc' --exclude='.busted' --exclude='Rockspec' --exclude='.pkgmeta' . .release/Stormy/
        cd .release
        zip -r ../Stormy-${{ steps.version.outputs.VERSION }}.zip Stormy
        cd ..
    
    - name: Generate checksums
      run: |
        sha256sum Stormy-${{ steps.version.outputs.VERSION }}.zip > checksums.txt
        md5sum Stormy-${{ steps.version.outputs.VERSION }}.zip >> checksums.txt
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.TAG }}^ 2>/dev/null || echo "")
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        
        if [ -z "$PREV_TAG" ]; then
          echo "Initial release" >> $GITHUB_OUTPUT
        else
          # Get commit messages
          git log ${PREV_TAG}..${{ steps.version.outputs.TAG }} --pretty=format:"- %s" >> $GITHUB_OUTPUT
        fi
        
        echo "" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Installation" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "1. Download \`Stormy-${{ steps.version.outputs.VERSION }}.zip\`" >> $GITHUB_OUTPUT
        echo "2. Extract to your WoW AddOns folder" >> $GITHUB_OUTPUT
        echo "3. The addon should appear as \"Stormy\" in your addon list" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Checksums" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        cat checksums.txt >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.TAG }}
        name: Stormy ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}
        files: |
          Stormy-${{ steps.version.outputs.VERSION }}.zip
          checksums.txt
    
    - name: Update CurseForge (optional)
      if: false  # Enable this when you have CurseForge API token
      run: |
        echo "CurseForge upload would happen here"
        # curl -X POST https://wow.curseforge.com/api/projects/{project-id}/upload-file ...